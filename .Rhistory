library("data.table")
library("dplyr")
library("lubridate")
setwd("~/Devel/R/DataScience/RepRes/Project1")
inFile <- "activity.csv"
dt <- read.table(inFile, header = TRUE, stringsAsFactors = FALSE, sep = ",",
colClasses = c("numeric", "character", "numeric"))
# 288 obs of 3 vars for 61 days
dt[,"date"] <- ymd(dt[,"date"])  # convert dates from character to POSIXct
# group data by date, plot a histogram of avg number of steps/day,
# also compute mean and median
days <- group_by(dt, date)
# from StackOverflow
sums <- days %>% summarise_each(funs(sum(., na.rm = TRUE)))
# this don't work
#sums <- days$steps %>% summarise_each(funs(sum(., na.rm = TRUE)))
# actually, I want to keep the NAs, rather than replace them with zeros
sumsNA <- days %>% summarise_each(funs(sum(., na.rm = FALSE)))
library("data.table")
library("dplyr")
library("lubridate")
setwd("~/Devel/R/DataScience/RepRes/Project1/Submit")
inFile <- "activity.csv"
dt <- read.table(inFile, header = TRUE, stringsAsFactors = FALSE, sep = ",",
colClasses = c("numeric", "character", "numeric"))
# 288 obs of 3 vars for 61 days
dt[,"date"] <- ymd(dt[,"date"])  # convert dates from character to POSIXct
days <- group_by(dt, date)
# from StackOverflow
sums <- days %>% summarise_each(funs(sum(., na.rm = TRUE)))
# this don't work
#sums <- days$steps %>% summarise_each(funs(sum(., na.rm = TRUE)))
# actually, I want to keep the NAs, rather than replace them with zeros
sumsNA <- days %>% summarise_each(funs(sum(., na.rm = FALSE)))
library("ggplot2")
qplot(sumsNA$steps, geom="histogram")
qplot(sumsNA$steps, geom="histogram",
main = "Number of Steps / Day",
xlab = "Number of Steps")
qplot(sumsNA$steps, geom="histogram",
main = "Number of Steps / Day",
xlab = "Number of Steps",
col = I("black"),
fill = I("red"))
qplot(sumsNA$steps, geom="histogram",
main = "Number of Steps / Day",
xlab = "Number of Steps",
col = I("black"),
fill = I("red"),
binwidth = 1000)
meanSteps <- mean(sumsNA$steps, na.rm=TRUE)
medianSteps <- median(sumsNA$steps, na.rm=TRUE)
cat("Mean Number of Steps / Day   : ", meanSteps, "\n")
cat("Median Number of Steps / Day : ", medianSteps, "\n")
meanSteps <- mean(sumsNA$steps, na.rm=TRUE)
medianSteps <- median(sumsNA$steps, na.rm=TRUE)
cat("Mean Number of Steps / Day   : ", meanSteps, "\n")
cat("Median Number of Steps / Day : ", medianSteps, "\n")
intervals <- group_by(dt, interval)
#avgSteps <- intervals %>% summarise_each(funs(mean(., na.rm = FALSE)))
# plot doesn't handle NA
avgSteps <- intervals %>% summarise_each(funs(mean(., na.rm = TRUE)))
qplot(avgSteps$interval, avgSteps$steps, type="l",
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(avgSteps$interval, avgSteps$steps, geom = "line",
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
intervals <- group_by(dt, interval)
#avgSteps <- intervals %>% summarise_each(funs(mean(., na.rm = FALSE)))
# plot doesn't handle NA
avgSteps <- intervals %>% summarise_each(funs(mean(., na.rm = TRUE)))
qplot(avgSteps$interval, avgSteps$steps, geom = "line",
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
# find the max interval
maxInterval <- top_n(avgSteps,1,steps)$interval
cat("Maximum average number of steps occurs during interval ", maxInterval)
cat("Maximum average number of steps occurs during interval ", maxInterval, "\n")
cat("At time ", maxInterval / 60, ":", maxInterval % 60, "\n")
maxInterval / 60
cat("Maximum average number of steps occurs during interval ", maxInterval, "\n")
cat("At time ", maxInterval %/% 60, ":", maxInterval %% 60, "\n")
cat("Maximum average number of steps occurs during interval", maxInterval, "\n")
cat("At time", maxInterval %/% 60, ":", maxInterval %% 60, "\n")
print("At time", maxInterval %/% 60, ":", maxInterval %% 60, "\n")
cat("Maximum average number of steps occurs during interval", maxInterval, "\n")
cat("At time", maxInterval %/% 60, ":", maxInterval %% 60, "\n")
cat("Maximum average number of steps occurs during interval", maxInterval, "\n")
cat("At time", (maxInterval * 5) %/% 60, ":", (maxInterval * 5) %% 60, "\n")
plot(avgSteps$interval, avgSteps$steps, type="l",
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(avgSteps$interval, avgSteps$steps, geom = "line",
data= avg$Steps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(avgSteps$interval, avgSteps$steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(interval, steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(steps, interval, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(AvgSteps$steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(avgSteps$steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(interval, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(x = interval, y = steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
qplot(x = steps, y = interval, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
avgSteps <- intervals %>% summarise_each(funs(sum(., na.rm = TRUE)))
plot(avgSteps$interval, avgSteps$steps, type="l",
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
rm(list=ls())
library("data.table")
library("dplyr")
library("lubridate")
setwd("~/Devel/R/DataScience/RepRes/Project1/Submit")
inFile <- "activity.csv"
dt <- read.table(inFile, header = TRUE, stringsAsFactors = FALSE, sep = ",",
colClasses = c("numeric", "character", "numeric"))
# 288 obs of 3 vars for 61 days
dt[,"date"] <- ymd(dt[,"date"])  # convert dates from character to POSIXct
days <- dt
days <- group_by(days, date)
# from StackOverflow
sums <- days %>% summarise_each(funs(sum(., na.rm = TRUE)))
# this don't work
#sums <- days$steps %>% summarise_each(funs(sum(., na.rm = TRUE)))
# actually, I want to keep the NAs, rather than replace them with zeros
sumsNA <- days %>% summarise_each(funs(sum(., na.rm = FALSE)))
library("ggplot2")
qplot(sumsNA$steps, geom="histogram",
main = "Number of Steps / Day",
xlab = "Number of Steps",
col = I("black"),
fill = I("red"),
binwidth = 1000)
meanSteps <- mean(sumsNA$steps, na.rm=TRUE)
medianSteps <- median(sumsNA$steps, na.rm=TRUE)
cat("Mean Number of Steps / Day   : ", meanSteps, "\n")
cat("Median Number of Steps / Day : ", medianSteps, "\n")
intervals <- group_by(dt, interval)
avgSteps <- intervals %>% summarise_each(funs(mean(., na.rm = TRUE)))
# 'time-series' plot
# confused here - did my summarize do what I wanted?
plot(avgSteps$interval, avgSteps$steps, type="l",
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps")
nrows(days)
nrow(days)
ncol(days)
nrow(sums)
nrow(intervals)
ncol(intervals)
nrow(avgSteps)
ncol(avgSteps)
avgSteps$interval
qplot(x = interval, y = steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps"
binwidth = 5)
qplot(x = interval, y = steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps",
binwidth = 5)
maxInterval <- top_n(avgSteps,1,steps)$interval
cat("Maximum average number of steps occurs during interval", maxInterval, "\n")
cat("At time", maxInterval %/% 60, ":", maxInterval %% 60, "\n")
hour <- maxInterval %/% 100
minute <- maxInterval %% 100
rm(list=ls())
library("data.table")
library("dplyr")
library("lubridate")
setwd("~/Devel/R/DataScience/RepRes/Project1/Submit")
inFile <- "activity.csv"
dt <- read.table(inFile, header = TRUE, stringsAsFactors = FALSE, sep = ",",
colClasses = c("numeric", "character", "numeric"))
# 288 obs of 3 vars for 61 days
dt[,"date"] <- ymd(dt[,"date"])  # convert dates from character to POSIXct
# ind <- 12 * (i %/% 100) + (i %% 100) / 5 + 1
index = function(i) {
index <- 12 * (i %/% 100) + (i %% 100) / 5 + 1
}
dt[,"interval"] <- index(dt[,"interval"])
intervals <- group_by(dt, interval)
#avgSteps <- intervals %>% summarise_each(funs(mean(., na.rm = FALSE)))
# plot doesn't handle NA
avgSteps <- intervals %>% summarise_each(funs(mean(., na.rm = TRUE)))
# 'time-series' plot
# confused here - did my summarize do what I wanted?
qplot(x = interval, y = steps, geom = "line",
data= avgSteps,
main = "Time Series of Number of Steps / 5-Minute Interval",
xlab = "interval",
ylab = "Average number of steps",
binwidth = 1)
maxInterval <- top_n(avgSteps,1,steps)$interval
cat("Maximum average number of steps occurs during interval", maxInterval, "\n")
maxInterval <- top_n(avgSteps,1,steps)$interval
cat("Maximum average number of steps occurs during interval", maxInterval, "\n")
# ?
cat("At time", maxInterval %/% 12, ":", maxInterval %% 12, "\n")
cat("At time", maxInterval %/% 12, ":", (maxInterval %% 12) * 5, "\n")
weekendData <- subset(dt, wday(date) %in% c(1, 7))
weekdayData <- subset(dt, !(wday(date) %in% c(1, 7)))
# n(weekend) + n(weekdays) adds up to total
# however - not following instructions exactly - didn't make factor variable
# so what?
# now make panel plot of weekday and weekend of steps/interval
par(mfrow = c(1,2))
#title(main = "Time Series of Number of Steps / 5-Minute Interval", outer = FALSE)
plot(weekdayData$interval, weekdayData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
plot(weekendData$interval, weekendData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
par(mfrow = c(2, 1)
#title(main = "Time Series of Number of Steps / 5-Minute Interval", outer = FALSE)
plot(weekdayData$interval, weekdayData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
plot(weekendData$interval, weekendData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
par(mfrow = c(2, 1))
#title(main = "Time Series of Number of Steps / 5-Minute Interval", outer = FALSE)
plot(weekdayData$interval, weekdayData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
plot(weekendData$interval, weekendData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
qplot(weekdayData$interval, weekdayData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
qplot(weekendData$interval, weekendData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
p1 <- qplot(weekdayData$interval, weekdayData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
p2 <- qplot(weekendData$interval, weekendData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
p1 <- qplot(weekdayData$interval, weekdayData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
p2 <- qplot(weekendData$interval, weekendData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
multiplot(p1, p2, cols = 1)
library(ggplot2)
p1 <- qplot(weekdayData$interval, weekdayData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
p2 <- qplot(weekendData$interval, weekendData$steps, type="l",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
multiplot(p1, p2, cols = 1)
library(gridExtra)  # must have gridExtra lib installed
grid.arrange(p1, p2, ncol = 1)
p1 <- qplot(weekdayData$interval, weekdayData$steps, geom = "line",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
p2 <- qplot(weekendData$interval, weekendData$steps, geom = "line",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
#multiplot(p1, p2, cols = 1)
library(gridExtra)  # must have gridExtra lib installed
grid.arrange(p1, p2, ncol = 1)
p1 <- qplot(weekdayData$interval, weekdayData$steps, geom = "line",
main = "N(steps) / interval",
sub = "Weekdays",
xlab = "interval",
ylab = "Average number of steps")
p2 <- qplot(weekendData$interval, weekendData$steps, geom = "line",
main = "N(steps) / interval",
sub = "Weekends",
xlab = "interval",
ylab = "Average number of steps")
#multiplot(p1, p2, cols = 1)
library(gridExtra)  # must have gridExtra lib installed
grid.arrange(p1, p2, ncol = 1)
p1 <- qplot(weekdayData$interval, weekdayData$steps, geom = "line",
main = "N(steps) / interval - Weekdays",
sub = "Weekdays",  # sub doesn't work?
xlab = "interval",
ylab = "Average number of steps")
p2 <- qplot(weekendData$interval, weekendData$steps, geom = "line",
main = "N(steps) / interval - Weekends",
sub = "Weekends",  # sub doesn't work?
xlab = "interval",
ylab = "Average number of steps")
#multiplot(p1, p2, cols = 1)
library(gridExtra)  # must have gridExtra lib installed
grid.arrange(p1, p2, ncol = 1)
